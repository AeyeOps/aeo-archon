#!/usr/bin/env bash
# Bootstrap Archon from source: clone repo, prep Supabase env, and launch
# Usage:
#   ./bootstrap-from-source.sh [--repo <url>] [--branch <name>] [--dir <path>] [--no-start]
# Defaults:
#   repo: https://github.com/coleam00/archon.git
#   branch: aeyeops/custom-main
#   dir: /opt/aeo/archon-src

set -Eeuo pipefail
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ARCHON_REPO_URL="${ARCHON_REPO_URL:-https://github.com/coleam00/archon.git}"
ARCHON_BRANCH="${ARCHON_BRANCH:-aeyeops/custom-main}"
ARCHON_SRC_DIR_DEFAULT="${ARCHON_SRC_DIR_OVERRIDE:-/opt/aeo/archon-src}"
ARCHON_SRC_DIR="$ARCHON_SRC_DIR_DEFAULT"
DO_START=1

ok(){ echo -e "${GREEN}✓${NC} $1"; }
warn(){ echo -e "${YELLOW}!${NC} $1"; }
err(){ echo -e "${RED}✗${NC} $1"; }

while [[ $# -gt 0 ]]; do
  case "$1" in
    --repo) ARCHON_REPO_URL="${2:-}"; shift 2;;
    --branch) ARCHON_BRANCH="${2:-}"; shift 2;;
    --dir) ARCHON_SRC_DIR="${2:-}"; shift 2;;
    --no-start) DO_START=0; shift;;
    -h|--help)
      cat <<EOF
Usage: $(basename "$0") [--repo <url>] [--branch <name>] [--dir <path>] [--no-start]
EOF
      exit 0;;
    *) err "Unknown option: $1"; exit 1;;
  esac
done

command -v git >/dev/null 2>&1 || { err "git not found"; exit 1; }

if [[ -d "$ARCHON_SRC_DIR/.git" ]]; then
  echo "Repo exists at $ARCHON_SRC_DIR; ensuring branch $ARCHON_BRANCH..."
  CURRENT_BRANCH=$(git -C "$ARCHON_SRC_DIR" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
  if [[ "$CURRENT_BRANCH" != "$ARCHON_BRANCH" ]]; then
    git -C "$ARCHON_SRC_DIR" fetch --all --prune || warn "Fetch failed; continuing with existing refs"
    if ! git -C "$ARCHON_SRC_DIR" checkout "$ARCHON_BRANCH"; then
      err "Unable to checkout $ARCHON_BRANCH"; exit 1
    fi
    CURRENT_BRANCH="$ARCHON_BRANCH"
  fi
  if git -C "$ARCHON_SRC_DIR" diff --quiet --ignore-submodules && [[ -z "$(git -C "$ARCHON_SRC_DIR" status --porcelain)" ]]; then
    git -C "$ARCHON_SRC_DIR" fetch origin "$ARCHON_BRANCH" --prune || warn "Origin fetch failed"
    git -C "$ARCHON_SRC_DIR" pull --ff-only origin "$ARCHON_BRANCH" || warn "Fast-forward pull skipped (non-FF or network issue)"
    ok "Repository updated"
  else
    warn "Local changes detected in $ARCHON_SRC_DIR; skipping auto-update"
  fi
else
  echo "Cloning $ARCHON_REPO_URL into $ARCHON_SRC_DIR..."
  git clone --depth 1 --branch "$ARCHON_BRANCH" "$ARCHON_REPO_URL" "$ARCHON_SRC_DIR"
  ok "Repository cloned"
fi

# Prepare .env in repo
REPO_ENV="$ARCHON_SRC_DIR/.env"
if [[ ! -f "$REPO_ENV" ]]; then
  if [[ -f "$ARCHON_SRC_DIR/.env.example" ]]; then cp "$ARCHON_SRC_DIR/.env.example" "$REPO_ENV"; ok ".env created from .env.example";
  elif [[ -f "$ARCHON_SRC_DIR/.env.sample" ]]; then cp "$ARCHON_SRC_DIR/.env.sample" "$REPO_ENV"; ok ".env created from .env.sample";
  else echo "# Generated by bootstrap" > "$REPO_ENV"; ok ".env initialized"; fi
fi

# Helper to upsert k=v into .env
upsert_env(){ local envf="$1"; local k="$2"; local v="$3"; local tmp="$envf.tmp"; awk -v k="$k" -v v="$v" 'BEGIN{done=0}{ if(!done && $0 ~ "^" k "=") { print k"="v; done=1 } else { print $0 } } END{ if(!done) print k"="v }' "$envf" > "$tmp"; mv "$tmp" "$envf"; }

# Ensure launcher is executable
chmod +x "$ARCHON_SRC_DIR/archon-up.sh" 2>/dev/null || true

if [[ $DO_START -eq 1 ]]; then
  echo "Starting Archon from source..."
  ( cd "$ROOT_DIR" && bash ./archon-up.sh )
else
  ok "Bootstrap complete. To start: (cd $ROOT_DIR && bash ./archon-up.sh)"
fi
